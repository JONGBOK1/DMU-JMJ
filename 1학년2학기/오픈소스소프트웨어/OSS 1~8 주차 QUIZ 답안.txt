OSS 1~8 주차 QUIZ 답안
==========================================================
OSS 2Weeks
-- \ 표시는 크게 중요하지않음, *표시는 중요함.

1.\ vscode는 에디터(편집기)이기 때문에 버전 관리 소프트웨어가 아니다.

2. 버전 관리라는 단어가 있다면 깃 허브를 생각하면된다.
 - clone 은 복제
 - commit은 업로드
 - fork는 끌어오는것

3. 깃과 깃 허브는 엄연히 다른것 
 - 3번은 깃 허브의 기능
 - 깃 자체에선 협업이나 자동화 기능이 없다.

4. anaconda는 라이브러리가 충돌하지 않게 가상환경을 만들어주는 툴이다.
 - bitbucket 은 깃허브와 비슷하며 GUI가 발달 되어있다.

5.  
 - restore = 복구
 - reset = 초기화 
 - push = 내보내기 ( 커밋 이후 동기화 하는 과정)

[주관식]
=> 버전관리 프로그램 (시스템)

==========================================================
OSS 3 Weeks
-- \ 표시는 크게 중요하지않음, *표시는 중요함.

1. 노트북을 비유로
운영체제 = system
계정 - global
폴더 - local

2. init = 깃 설정을 담은 폴더 생성
- ' . ' 은 현재 위치를 나타내는 명령어
- create라는 명령어는 깃에서 사용되지않는것으로 앎
- config는 설정? 하는 것 생성이랑은 연관있지않음

3.\ vscode는 소스코드 편집기 

4.\ 	pwd 	 - 현재 경로
	ls	 - 현재 경로 파일 목록
	rm 	 - 지우기
	mkdir - 폴더 만들기

5.	cat	- 파일 내용 출력
	echo	- 파일에 내용 입력
	ls	- 현재 경로 파일 목록 	(list)
	cp	- 복사 			(copy)
   
[주관식]
=> 	echo hello > a.txt
	( > 는 => 같은 화살표)

==========================================================
OSS 4 Weeks
-- \ 표시는 크게 중요하지않음, *표시는 중요함.

1. 	작업 영역		= vscode
	스테이징 영역	= 커밋한 상태
	깃 저장소 영역	= 동기화

2. 	status 	= 상태
	config	= 설정
	add 		= 추가
	commit 	= 커밋

3. 	branch 	= 가지
	checkout	= 과거 버전으로 이동
	pull		= 당기다
	log		= 이력

4.	shop  	= 현재 상태 보이기

5. 	-am 		=> add + message
	--onelibe	=> 한줄로 출력
	--reverse	=> 거꾸로 출력
	--graph	=> 그래프로 출력

[주관식] *
got show 	HEAD^	(HEAD^^^)
		HEAD~	(HEAD~3)	
-- log는 버전 지정을 못함. (영수증처럼 숨길 수 없이 출력)

==========================================================
OSS 5 Weeks
\ 표시는 크게 중요하지않음, *표시는 중요함.

1. 	작업영역	스테이징영역 	깃저장소
	work~	stage~		HEAD
-- 작업 영역이랑 스테이징 영역의 비교이기 때문에 HEAD가 들어간 코드를 소거
-- diff=> 비교하는 명령어. git diff 의 기본값이 작업영역과 스테이징 영역을 비교.

2. 	rm file 			= 현재 폴더에서 삭제
	git rm --cached file 	= 파일에 있는 커스텀한 영역을 지워라
	ls file			= ls는 목록 보는 명령어
	git rm file			= git이 들어갔기 때문에 스테이징 영역까지 영향
					  (기본값이 작업 디렉토리만)

3. 	M 	= 수정된
	D 	= delete
	A	= add (새로운 파일)
	??	= untracted

4. 작업 디렉토리 이기 때문에 staged, HEAD를 소거

5. 4주차 주관식 참고

[주관식] 
git restore --source=HEAD --staged --worktree

==========================================================
OSS 7 Weeks
\ 표시는 크게 중요하지않음, *표시는 중요함.

1. restore는 복구기 때문에 다른 셋과 기능이 다르다.

2. 버전이름은 커밋할때 메세지를 적은 로그에 ex) eae87fdb같이 고유 번호가 생긴다.

3. 브랜치는 가지 라고 생각
 	1) config
	2) 가장 적절
	3) 임시라는 단어가 애매
	4) 작업공간

4. 위에 서술 참고

5. '모든' 브랜치, all

[주관식]*
git checkout HEAD^^
		  //HEAD~2

(detached head) - HEAD가 떨어져있는 상태 

==========================================================
OSS 8 Weeks
\ 표시는 크게 중요하지않음, *표시는 중요함.

1. git bash

2. clone은 내 작업공간으로 복사(깃 허브 계정의 저장소가 아님)

3. push

4.\ 2번에 서술

5. pull ( 3번과 반대 )

[주관식]
 origin
(clone의 기본값(default)가 origin)

==========================================================





























