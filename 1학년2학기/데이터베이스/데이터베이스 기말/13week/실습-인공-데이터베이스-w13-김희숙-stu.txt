-- 인공_데이터베이스(QC) (담당: 김희숙) 13주차 실습(stu): 서브질의

====================================
[1교시] 실습용(복습)(w13)

-- 데이터베이스(QC)(담당: 김희숙) 13주차 수업중실습(stu)

(w13) 1교시: 다음 문제를 엑샐파일에 답안을 작성하시오
     (복습)   [Quiz 1-1] R, S (조인)
     (복습)   [실습 1-1] (합집합 / 조인)
===========================
     (복습)   [Quiz 1-1] R, S (조인)
     (복습)   [실습 1-1] (합집합 / 조인)
       
[Quiz 2-1] emp (자체조인)
[Quiz 2-2] 추천고객(자체조인) 

[실습 2-1] 하위질의(department, employee)
[실습 3-1] 하위질의(stu, pro)
===========================

-----------------------------------------
-- [Quiz 1-1] (조인) R, S
다음 두 릴레이션 R과 S에 대해 R을 왼쪽, S를 오른쪽 릴레이션으로 하고
속성 B를 조인 속성으로 하여
자연조인, 왼쪽외부조인, 완전외부조인으로 수행하였을 때
결과 릴레이션의 카디널리티는 각각 얼마인가?

R                S
  A       B        B       C
-----------     -----------
   a       2        1        x
   b       3        2       y
   c       3         3      z
   d       5

-- 1) 자연조인
-- 2) 왼쪽외부조인
-- 3) 완전외부조인
-----------------------------------------


-----------------------------------------
/* -------------------------------------- */
drop table if exists R;
drop table if exists S;

CREATE TABLE R (
	A char(1) ,
	B char(1)
);

CREATE TABLE S (
	B char(1) ,
	C char(1)
);

INSERT INTO R VALUES ('a', '2');
INSERT INTO R VALUES ('b', '3');
INSERT INTO R VALUES ('c', '3');
INSERT INTO R VALUES ('d', '5');

INSERT INTO S VALUES ('1', 'x');
INSERT INTO S VALUES ('2', 'y');
INSERT INTO S VALUES ('3', 'z');

select * from r;
select * from s;
/* -------------------------------------- */
-----------------------------------------
[실습 1-1] (합집합 / 조인)
-- department(deptno, deptname, floor)
-- employee(empno, empname, title, manager, salary, dno) 

-- 16-1) 김창섭이 속한 부서번호와 부서의 모든 부서번호를 합집합으로 검색하라 (UNION)
-- 16-2) 김창섭이 속한 부서번호와 부서의 모든 부서번호를 합집합으로 검색하라 (UNION ALL)

-- 17) 사원의 이름과 이 사원이 속한 부서이름을 검색하라 (조인)

-- 19) 사원에 대해서 부서이름, 사원이름, 직급, 급여를 검색하라.
-- 부서이름에 대해서 오름차순, 부서이름이 같을 경우에는 salary에 대해서 내림차순으로 정렬하라
/* -------------------------------------- */
/*  [실습1-1][실습2-1] 조인/하위질의 실습용 */

-- (quiz-booksr_deptemp-mysql.sql) 

-- department(deptno, deptname, floor)                    
-- employee(empno, empname, title, manager, salary, dno)

-- 부서(부서번호,부서명,위치)
-- 사원(사번,사원명,직책,직속상사,부서번호)

drop table if exists employee;
drop table if exists department;

CREATE TABLE department (
     deptno              int          NOT NULL ,
     deptname          varchar(10) ,
     floor                 int ,
     PRIMARY KEY(deptno)
);

INSERT INTO department VALUES(1, '영업', 8);
INSERT INTO department VALUES(2, '기획', 10);
INSERT INTO department VALUES(3, '개발', 9);
INSERT INTO department VALUES(4, '총무', 7);

CREATE TABLE employee (
    empno	         int	              NOT NULL,
    empname     varchar(10)     UNIQUE,
    title	         varchar(10)     DEFAULT '사원',
    manager       int  ,
    salary            int	 ,
    dno              int	 ,
    PRIMARY KEY(empno),
    FOREIGN KEY(dno) REFERENCES department(deptno)
);

INSERT INTO employee VALUES(2106, '김창섭','대리',1003, 2500000, 2);
INSERT INTO employee VALUES(3426, '박영권','과장',4377, 3000000, 1);
INSERT INTO employee VALUES(3011, '이수민','부장',4377, 4000000, 3);
INSERT INTO employee VALUES(1003, '조민희','과장',4377, 3000000, 2);
INSERT INTO employee VALUES(3427, '최종철','사원',3011, 1500000, 3);
INSERT INTO employee VALUES(1365, '김상원','사원',3426, 1500000, 1);
INSERT INTO employee(empno, empname, title, salary, dno) VALUES(4377, '이성래','이사', 5000000, 2);

select * from department;
select * from employee;
/* -------------------------------------- */
-----------------------------------------
# [요약] 자체 조인(self join)
자신의 테이블을 참조하는 관계
-----------------------------------------
-- [Quiz 2-1] (자체조인) emp

-- [Quiz 2-1] [실습] 사원명과 직속상사명을 검색하라
-- emp(empno, empname, manager, dno)


<실행결과>

-----------------------------------------
/* -------------------------------------- */
-- emp(empno, empname, manager, dno)
DROP TABLE if exists emp;

create table emp (
    empno       char(4) PRIMARY KEY ,
    empname   varchar(12) ,
    manager    char(4) ,
    dno          char(1) ,
    FOREIGN KEY (manager) REFERENCES emp(empno)
);

insert into emp values('3011','이수민',NULL,'1');
insert into emp values('3426','박영권','3011','3');
insert into emp values('1003','조민희','3011','1');
insert into emp values('2106','김창섭','3426','2');
insert into emp values('3427','최종철','2106','3');

select * from emp;
/* -------------------------------------- */
-----------------------------------------
-- [Quiz 2-2] (자체조인) 추천고객

-- [Quiz 2-2] [실습] 고객명과 추천고객명을 검색하라
-- 추천고객(고객아이디,고객이름,나이,등급,직업,적립금,추천고객)
-----------------------------------------
[Quiz 2-2] 고객명과 추천고객명을 검색하라



<실행결과> 

/* -------------------------------------- */
-- 추천고객(고객아이디,고객이름,나이,등급,직업,적립금,추천고객)
DROP TABLE if exists 추천고객;

create table 추천고객 (
    고객아이디   char(20)    NOT NULL PRIMARY KEY ,
    고객이름     varchar(20)  ,
    나이         int ,
    등급         varchar(10) ,
    직업         varchar(10) ,
    적립금       int ,
    추천고객     char(20) ,
    foreign key(추천고객) references 추천고객(고객아이디)
);

-- 추천고객(고객아이디,고객이름,나이,등급,직업,적립금,추천고객)
insert into 추천고객 values('orange','정지영',22,'silver','학생',0, NULL);
insert into 추천고객 values('apple','김현준',20,'gold','학생',1000, 'orange');
insert into 추천고객 values('banana','정소화',25,'vip','간호사',2500, 'orange');
insert into 추천고객 values('carrot','원유선',28,'gold','교사',4500, 'apple');

-- 데이터 조회
select * from 추천고객;
/* -------------------------------------- */
-----------------------------------------
[실습 2-1] 하위질의
-- department(deptno, deptname, floor)
-- employee(empno, empname, title, manager, salary, dno) 

-- 20) 박영권과 같은 직급을 갖는 모든 사원들의 이름과 직급을 검색하라
-- 21) 영업부나 개발부에 근무하는 사원들의 이름을 검색하라(IN 사용)
-- 21-02) 영업부나 개발부에 근무하지 않는 사원들의 이름을 검색하라(NOT IN 사용)

-- 24) 사원들이 한 명도 소속되지 않은 부서명을 검색하라 (NOT EXISTS 사용)
-----------------------------------------
# [요약] 하위질의

S
F
W        (S
            F
            W       );
-----------------------------------------
-----------------------------------------
# [요약] 중첩질의
# [요약] 서브쿼리(sub query), 부속질의, 부질의

하위질의: 서브 쿼리 (sub query, 하위질의, 부질의, 중첩질의, 상관중첩질의)

ANY : 서브쿼리의 여러 개의 결과 중 한 가지만 만족해도 되며
ALL : 서브쿼리의 여러 개의 결과를 모두 만족시켜야 된다
SOME : ANY 와 동일한 의미
=ANY : IN 과 동일한 의미

ALL:     하위질의의 모든 결과에 대해 조건 수식이 참인 경우 결과를 반환
SOME: 하위질의의 한 개 이상의 결과에 대해 조건 수식이 참인 경우 결과를 반환
ANY:   SOME 과 동일

IN 은  =ANY 와 동일, 
NOT IN 은 <>ALL 과 동일하다
-----------------------------------------
[실습 3-1] 중첩질의(sub query)
-- stu(sno, sname, dept, sage)
-- pro(pno, pname, dept, page)

-- 3-1) 교수 테이블에서 이정무 의 학과와 같은 학생 이름, 학과, 나이를 검색하라
-- 3-2) 교수 테이블에서 pno 가 p1 이거나 p2 인 학과와 같은 학생 이름, 학과, 나이를 검색하라

-- 3-3) 학생 테이블과 교수 테이블에서 모든 학생들보다 나이가 많은 교수의
-- 교번, 이름, 나이를 ALL 구문을 이용하여 검색하라

-- 3-4) 학생 테이블과 교수 테이블에서 한 명 이상 교수보다 
-- 나이가 많은 학생이 있을 경우 학생의 학번, 이름, 나이를 SOME 구문으로 검색하라

-- 3-5) 가장 나이가 많은 학생 이름, 나이를 검색하라


/* -------------------------------------- */
DROP TABLE if exists pro;
DROP TABLE if exists stu;

-- stu(sno, sname, dept, sage)
-- pro(pno, pname, dept, page)

CREATE TABLE pro (
    pno   char(2),
    pname varchar(20), 
    dept  varchar(20),
    page  int,
    primary key(pno)
);

CREATE TABLE stu (
    sno   char(2),
    sname varchar(20), 
    dept  varchar(20),
    sage  int,
    primary key(sno)
);

insert into pro values('p1','이정무','컴퓨터',36);
insert into pro values('p2','우태하','컴퓨터',32);
insert into pro values('p3','이성민','건축',45);

insert into stu values('s1','유준호','컴퓨터',23);
insert into stu values('s2','오정민','컴퓨터',34);
insert into stu values('s3','이태현','건축',22);
insert into stu values('s4','신현주','건축',21);

select * from pro;
select * from stu;
/* -------------------------------------- */

-----------------------------------------
(교재 5장)
use univdb;

-- 과목(과목번호, 이름, 강의실, 개설학과, 시수)
-- 학생(학번, 이름, 주소, 학년, 나이, 휴대폰번호, 소속학과)
-- 수강(학번, 과목번호, 신청날짜, 중간성적, 기말성적, 평가학점)

[실습 1] 다음에 대하여 SQL문법과 실행결과를 작성하라 

-- 예제5-1) 전체 학생의 이름과 주소를 검색하시오
-- 예제5-2) 전체 학생의 모든 정보를 검색하시오
-- (* 로 검색) 
-- (필드명으로 검색)

-- 예제5-3) 전체 학생의 소속학과 정보를 중복없이 검색하시오
-- (DISTINCT 사용)
-- 예제5-3-2) 전체 학생의 소속학과 정보를 모두 검색하시오
-- (ALL 키워드 사용)

-- 예제5-4) 학생 중에서 2학년 이상인 컴퓨터 학과 학생의 
-- 이름, 학년, 소속학과, 휴대폰번호 정보를 검색하시오

-- 예제5-5) 1, 2, 3학년 학생이거나 컴퓨터 학과에
-- 소속되지 않은 학생의 이름, 학년, 소속학과, 휴대폰번호
-- 정보를 검색하시오
-- (부등호 사용)
-- (BETWEEN AND 사용)

-- 예제5-6) 컴퓨터 학과나 정보통신 학과의 학생의 이름과 학년, 소속학과 정보를
-- 오름차순으로 검색하시오

-- 예제5-7) 전체 학생의 모든 정보를 검색하되 학년을 기준으로 1차 오름차순 정렬하고,
-- 학년이 같은 경우에는 이름을 기준으로 2차 내림차순 정렬하여 검색하시오

[실습 2] 집계함수, group by

-- 예제5-8) 전체 학생수를 검색하시오
-- 1) * 을 이용해 계산하는 경우
-- 2) 학번 속성을 이용해 계산하는 경우
-- 3) 주소 속성을 이용해 계산하는 경우(널 값 제외) 

-- 예제5-8-2) 전체학생수, 주소를 입력한 학생수, 주소의 종류를 중복없이 검색한 개수를 
-- 검색하시오

-- 예제5-9) 여 학생의 평균 나이를 검색하시오

-- 예제5-10) 전체 학생의 성별 최고 나이와 최저 나이를 검색하시오

-- 예제5-11) 20대 학생만을 대상으로 나이별 학생수를 검색하시오
-- 예제5-12) 각 학년별로 2명 이상의 학생을 갖는 학년에 대해서만
-- 학생별 학생수를 검색하시오

[실습 3] LIKE 연산자/ 널 값 검색 / 집합 연산자

-- 예제5-13) 이 씨 성을 가진 학생들의 학번과 학생 이름을 검색하시오
-- 예제5-14) 주소지가 '서울'인 학생의 이름, 주소, 학년을 
-- 학년순(내림차순)으로 검색하시오

-- 예제5-15) 휴대폰번호가 등록되지 않은(널 값을 갖는)
-- 학생의 이름과 휴대폰번호를 검색하시오

-- 예제5-16) '여' 학생이거나 'A' 학점을 받은 학생의 학번을 검색하시오

[실습 4] 조인

-- 예제5-18) 전체 학생의 기본 정보와 모든 수강 정보를 검색하시오
-- 1) (SELECT FROM WHERE 방법)
-- 2) (SELECT FROM ON 방법)

-- 예제5-19) 학생 중에서 과목번호가 c002 인 과목을 수강한 학생의 
-- 학번과 이름, 과목번호, 변환중간성적(학생별중간성적의 10% 가산점수)을 검색하시오
-- 1) (SELECT FROM WHERE 방법)
-- 2) (SELECT FROM ON 방법)

-- 예제5-20) 학생 중에서 정보보호 과목을 수강한 학생의 
-- 학번과 이름, 과목번호를 검색하시오
-- 1) (SELECT FROM WHERE 방법)
-- 2) (SELECT FROM ON 방법)

-- 예제5-21) 학생 중에서 과목번호가 c002 인 과목을 수강한 학생의 
-- 이름, 과목번호를 검색하시오
-- (테이블 별칭 as 사용)


# [외부 조인]

-- 예제5-23) 과목을 수강하지 않은 학생을 포함하여 모든 학생의 
-- 학번, 이름과 학생이 수강한 교과목의 평가학점을 검색하시오

---------------------------------(여기까지 [과제2])

-- 과목(과목번호, 이름, 강의실, 개설학과, 시수)
-- 학생(학번, 이름, 주소, 학년, 나이, 휴대폰번호, 소속학과)
-- 수강(학번, 과목번호, 신청날짜, 중간성적, 기말성적, 평가학점)

[실습 5] 자체 조인(self join)

# [셀프 조인]

-- 예제5-22) 주소가 같은 학생들의 이름을 쌍으로 검색하시오.
-- 이 때 검색되는 첫 번째 학생이 두번째 학생보다 학년이 높도록 하시오

[실습 6] 서브질의

*(주의: 교재 예제5-17a) 문제를 다음과 같이 수정했음)

예제5-17a) 학번이 s001, s003, s004 인 학생의 이름을 검색하시오 
-- (IN 사용)

-- 예제5-17b) 과목번호가 c002 인 과목을 수강한 학생의 이름을 검색하시오
-- (서브질의 사용)

-- 예제5-17c) 정보보호 과목을 수강한 학생의 이름을 검색하시오
-- (중첩서브질의 사용)

-- 예제5-17d) 과목번호가 c002 인 과목을 수강한 학생의 이름을 검색하시오
-- (EXISTS 사용)

-- 예제5-17e) 학생 중에서 한 과목도 수강하지 않은 학생의 이름을 검색하시오
-- (NOT EXISTS 사용)

----------------------------------------------
/* -------------------------------------- */
-- ch5 SQL ("SQL과 NoSQL 기반의 데이터베이스 입문", 박성진, 생능
-- (MySQL)
drop database if exists univDB;

-- 교재 5장 스키마 생성
CREATE DATABASE `univDB` 
  DEFAULT CHARACTER SET utf8mb4;

-- 사용할 데이터베이스 선택
use univDB;

DROP TABLE if exists 수강;
DROP TABLE if exists 과목;
DROP TABLE if exists 학생;

-- 과목(과목번호, 이름, 강의실, 개설학과, 시수)
-- 학생(학번, 이름, 주소, 학년, 나이, 휴대폰번호, 소속학과)
-- 수강(학번, 과목번호, 신청날짜, 중간성적, 기말성적, 평가학점)

CREATE TABLE 과목 (
	  과목번호 char(4)            NOT NULL     PRIMARY KEY , 
	  이름       VARCHAR(20)   NOT NULL , 
	  강의실    CHAR(3)          NOT NULL ,
	  개설학과 VARCHAR(20)   NOT NULL ,
	  시수       INT                 NOT NULL 
) ; 

CREATE TABLE 학생 (
	  학번       CHAR(4)           NOT NULL ,
	  이름       VARCHAR(20)    NOT NULL ,
	  주소       VARCHAR(50)     DEFAULT '미정' , 
	  학년       INT                  NOT NULL ,
	  나이       INT  ,
	  성별       CHAR(1)           NOT NULL ,
	  휴대폰번호  CHAR(14) , 
                소속학과    VARCHAR(20) ,
	  PRIMARY KEY (학번) 
) ; 

CREATE TABLE 수강 (
	  학번        char(6)            NOT NULL ,
	  과목번호  CHAR(4)          NOT NULL ,
	  신청날짜   DATE             NOT NULL ,
	  중간성적   INT                  DEFAULT 0 ,
	  기말성적   INT                  DEFAULT 0 , 
	  평가학점   CHAR(1) ,        
	  PRIMARY KEY(학번, 과목번호) 
) ; 

-- 학생 테이블 입력
INSERT INTO 학생
VALUES ('s001', '김연아', '서울 서초', 4, 23, '여', '010-1111-2222',  '컴퓨터') ;
INSERT INTO 학생
VALUES ('s002', '홍길동', DEFAULT, 1, 26, '남', NULL,  '통계') ;
INSERT INTO 학생
VALUES ('s003', '이승엽', NULL, 3, 30, '남', NULL,  '정보통신') ;
INSERT INTO 학생
VALUES ('s004', '이영애', '경기 분당', 2, NULL, '여', '010-4444-5555', '정보통신') ;
INSERT INTO 학생
VALUES ('s005', '송윤아', '경기 분당', 4, 23, '여', '010-6666-7777', '컴퓨터') ;
INSERT INTO 학생
VALUES ('s006', '홍길동', '서울 종로', 2, 26, '남', '010-8888-9999', '컴퓨터') ;
INSERT INTO 학생
VALUES ('s007', '이은진', '경기 과천', 1, 23, '여', '010-2222-3333', '경영') ;

-- 과목 테이블 입력
INSERT INTO 과목
VALUES ('c001', '데이터베이스', 126, '컴퓨터', 3) ;
INSERT INTO 과목
VALUES ('c002', '정보보호', 137, '정보통신', 3) ;
INSERT INTO 과목
VALUES ('c003', '모바일웹', 128, '컴퓨터', 3) ;
INSERT INTO 과목
VALUES ('c004', '철학개론', 117, '철학', 2) ;
INSERT INTO 과목
VALUES ('c005', '전공글쓰기', 120, '교양학부', 1) ;

-- 수강 테이블 입력
INSERT INTO 수강
VALUES ('s001', 'c002', '2019-09-03', 93, 98, 'A') ;
INSERT INTO 수강
VALUES ('s004', 'c005', '2019-03-03', 72, 78, 'C') ;
INSERT INTO 수강
VALUES ('s003', 'c002', '2017-09-06', 85, 82, 'B') ;
INSERT INTO 수강
VALUES ('s002', 'c001', '2018-03-10', 31, 50, 'F') ;
INSERT INTO 수강
VALUES ('s001', 'c004', '2019-03-05', 82, 89, 'B') ;
INSERT INTO 수강
VALUES ('s004', 'c003', '2020-09-03', 91, 94, 'A') ;
INSERT INTO 수강
VALUES ('s001', 'c005', '2020-09-03', 74, 79, 'C') ;
INSERT INTO 수강
VALUES ('s003', 'c001', '2019-03-03', 81, 82, 'B') ;
INSERT INTO 수강
VALUES ('s004', 'c002', '2018-03-05', 92, 95, 'A') ;

-- 과목(과목번호, 이름, 강의실, 개설학과, 시수)
-- 학생(학번, 이름, 주소, 학년, 나이, 휴대폰번호, 소속학과)
-- 수강(학번, 과목번호, 신청날짜, 중간성적, 기말성적, 평가학점)

select * from 과목;
select * from 학생;
select * from 수강;
/* -------------------------------------- */
----------------------------------------------